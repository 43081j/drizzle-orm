// AUTOGENERATED FILE
// This file was generated from grammar.ohm by `ohm generateBundles`.

import {
  BaseActionDict,
  Grammar,
  IterationNode,
  Node,
  NonterminalNode,
  Semantics,
  TerminalNode
} from 'ohm-js';

export interface JSImportsActionDict<T> extends BaseActionDict<T> {
  JSImports?: (this: NonterminalNode, arg0: IterationNode, arg1: IterationNode) => T;
  Expr?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ImportExpr_From?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: NonterminalNode, arg3: NonterminalNode) => T;
  ImportExpr_NoFrom?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode) => T;
  ImportExpr?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Rest?: (this: NonterminalNode, arg0: IterationNode) => T;
  ImportInner_Default?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  ImportInner_Extended?: (this: NonterminalNode, arg0: TerminalNode, arg1: NonterminalNode, arg2: IterationNode, arg3: TerminalNode) => T;
  ImportInner_Type?: (this: NonterminalNode, arg0: TerminalNode, arg1: TerminalNode, arg2: NonterminalNode, arg3: IterationNode, arg4: TerminalNode) => T;
  ImportInner?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ImportExtendedSelection?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  ImportExtendedSelectionTypeless?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  Import?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode, arg2: IterationNode) => T;
  TypeImport?: (this: NonterminalNode, arg0: NonterminalNode, arg1: NonterminalNode, arg2: IterationNode, arg3: IterationNode) => T;
  kType?: (this: NonterminalNode, arg0: TerminalNode) => T;
  kImport?: (this: NonterminalNode, arg0: TerminalNode) => T;
  kFrom?: (this: NonterminalNode, arg0: TerminalNode) => T;
  kAs?: (this: NonterminalNode, arg0: TerminalNode) => T;
  kComma?: (this: NonterminalNode, arg0: TerminalNode) => T;
  identifier?: (this: NonterminalNode, arg0: NonterminalNode, arg1: IterationNode) => T;
  quote?: (this: NonterminalNode, arg0: TerminalNode) => T;
  notQuote?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  importSource?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  semicolon?: (this: NonterminalNode, arg0: TerminalNode) => T;
  lineTerminator?: (this: NonterminalNode, arg0: TerminalNode) => T;
  comment?: (this: NonterminalNode, arg0: NonterminalNode) => T;
  multiLineComment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode, arg2: TerminalNode) => T;
  singleLineComment?: (this: NonterminalNode, arg0: TerminalNode, arg1: IterationNode) => T;
}

export interface JSImportsSemantics extends Semantics {
  addOperation<T>(name: string, actionDict: JSImportsActionDict<T>): this;
  extendOperation<T>(name: string, actionDict: JSImportsActionDict<T>): this;
  addAttribute<T>(name: string, actionDict: JSImportsActionDict<T>): this;
  extendAttribute<T>(name: string, actionDict: JSImportsActionDict<T>): this;
}

export interface JSImportsGrammar extends Grammar {
  createSemantics(): JSImportsSemantics;
  extendSemantics(superSemantics: JSImportsSemantics): JSImportsSemantics;
}

declare const grammar: JSImportsGrammar;
export default grammar;

